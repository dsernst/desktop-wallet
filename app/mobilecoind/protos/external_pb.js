// source: external.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

const jspb = require('google-protobuf');

const goog = jspb;
const global = Function('return this')();

goog.exportSymbol('proto.external.AccountKey', null, global);
goog.exportSymbol('proto.external.Amount', null, global);
goog.exportSymbol('proto.external.CompressedRistretto', null, global);
goog.exportSymbol('proto.external.CurveScalar', null, global);
goog.exportSymbol('proto.external.Ed25519Public', null, global);
goog.exportSymbol('proto.external.Ed25519Signature', null, global);
goog.exportSymbol('proto.external.EncryptedFogHint', null, global);
goog.exportSymbol('proto.external.KeyImage', null, global);
goog.exportSymbol('proto.external.PublicAddress', null, global);
goog.exportSymbol('proto.external.Range', null, global);
goog.exportSymbol('proto.external.Receipt', null, global);
goog.exportSymbol('proto.external.RingMLSAG', null, global);
goog.exportSymbol('proto.external.RistrettoPrivate', null, global);
goog.exportSymbol('proto.external.RootEntropy', null, global);
goog.exportSymbol('proto.external.RootIdentity', null, global);
goog.exportSymbol('proto.external.SignatureRctBulletproofs', null, global);
goog.exportSymbol('proto.external.Tx', null, global);
goog.exportSymbol('proto.external.TxHash', null, global);
goog.exportSymbol('proto.external.TxIn', null, global);
goog.exportSymbol('proto.external.TxOut', null, global);
goog.exportSymbol('proto.external.TxOutConfirmationNumber', null, global);
goog.exportSymbol('proto.external.TxOutMembershipElement', null, global);
goog.exportSymbol('proto.external.TxOutMembershipHash', null, global);
goog.exportSymbol('proto.external.TxOutMembershipProof', null, global);
goog.exportSymbol('proto.external.TxPrefix', null, global);
goog.exportSymbol('proto.external.ViewKey', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RistrettoPrivate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RistrettoPrivate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RistrettoPrivate.displayName =
    'proto.external.RistrettoPrivate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.CompressedRistretto = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.CompressedRistretto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.CompressedRistretto.displayName =
    'proto.external.CompressedRistretto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Ed25519Public = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Ed25519Public, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Ed25519Public.displayName = 'proto.external.Ed25519Public';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Ed25519Signature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Ed25519Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Ed25519Signature.displayName =
    'proto.external.Ed25519Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.AccountKey = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.AccountKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.AccountKey.displayName = 'proto.external.AccountKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.PublicAddress = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.PublicAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.PublicAddress.displayName = 'proto.external.PublicAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RootIdentity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RootIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RootIdentity.displayName = 'proto.external.RootIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RootEntropy = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RootEntropy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RootEntropy.displayName = 'proto.external.RootEntropy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.ViewKey = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.ViewKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.ViewKey.displayName = 'proto.external.ViewKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.CurveScalar = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.CurveScalar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.CurveScalar.displayName = 'proto.external.CurveScalar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.KeyImage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.KeyImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.KeyImage.displayName = 'proto.external.KeyImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Range = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Range.displayName = 'proto.external.Range';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutMembershipHash = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutMembershipHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutMembershipHash.displayName =
    'proto.external.TxOutMembershipHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutMembershipElement = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutMembershipElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutMembershipElement.displayName =
    'proto.external.TxOutMembershipElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutMembershipProof = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.external.TxOutMembershipProof.repeatedFields_,
    null
  );
};
goog.inherits(proto.external.TxOutMembershipProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutMembershipProof.displayName =
    'proto.external.TxOutMembershipProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutConfirmationNumber = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutConfirmationNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutConfirmationNumber.displayName =
    'proto.external.TxOutConfirmationNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Amount = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Amount.displayName = 'proto.external.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.EncryptedFogHint = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.EncryptedFogHint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.EncryptedFogHint.displayName =
    'proto.external.EncryptedFogHint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOut = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOut.displayName = 'proto.external.TxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxIn = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.external.TxIn.repeatedFields_,
    null
  );
};
goog.inherits(proto.external.TxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxIn.displayName = 'proto.external.TxIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxPrefix = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.external.TxPrefix.repeatedFields_,
    null
  );
};
goog.inherits(proto.external.TxPrefix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxPrefix.displayName = 'proto.external.TxPrefix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RingMLSAG = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.external.RingMLSAG.repeatedFields_,
    null
  );
};
goog.inherits(proto.external.RingMLSAG, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RingMLSAG.displayName = 'proto.external.RingMLSAG';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.SignatureRctBulletproofs = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.external.SignatureRctBulletproofs.repeatedFields_,
    null
  );
};
goog.inherits(proto.external.SignatureRctBulletproofs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.SignatureRctBulletproofs.displayName =
    'proto.external.SignatureRctBulletproofs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Tx = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Tx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Tx.displayName = 'proto.external.Tx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxHash = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxHash.displayName = 'proto.external.TxHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Receipt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Receipt.displayName = 'proto.external.Receipt';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.RistrettoPrivate.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.RistrettoPrivate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.RistrettoPrivate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.RistrettoPrivate.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RistrettoPrivate}
 */
proto.external.RistrettoPrivate.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.RistrettoPrivate();
  return proto.external.RistrettoPrivate.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RistrettoPrivate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RistrettoPrivate}
 */
proto.external.RistrettoPrivate.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RistrettoPrivate.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.RistrettoPrivate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RistrettoPrivate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RistrettoPrivate.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.RistrettoPrivate.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.RistrettoPrivate.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.RistrettoPrivate.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RistrettoPrivate} returns this
 */
proto.external.RistrettoPrivate.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.CompressedRistretto.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.CompressedRistretto.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.CompressedRistretto} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.CompressedRistretto.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.CompressedRistretto.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.CompressedRistretto();
  return proto.external.CompressedRistretto.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.CompressedRistretto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.CompressedRistretto.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.CompressedRistretto.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.CompressedRistretto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.CompressedRistretto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.CompressedRistretto.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.CompressedRistretto.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.CompressedRistretto.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.CompressedRistretto.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.CompressedRistretto} returns this
 */
proto.external.CompressedRistretto.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.Ed25519Public.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.Ed25519Public.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.Ed25519Public} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.Ed25519Public.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Ed25519Public}
 */
proto.external.Ed25519Public.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.Ed25519Public();
  return proto.external.Ed25519Public.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Ed25519Public} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Ed25519Public}
 */
proto.external.Ed25519Public.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Ed25519Public.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.Ed25519Public.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Ed25519Public} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519Public.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.Ed25519Public.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.Ed25519Public.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.Ed25519Public.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.Ed25519Public} returns this
 */
proto.external.Ed25519Public.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.Ed25519Signature.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.Ed25519Signature.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.Ed25519Signature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.Ed25519Signature.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Ed25519Signature}
 */
proto.external.Ed25519Signature.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.Ed25519Signature();
  return proto.external.Ed25519Signature.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Ed25519Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Ed25519Signature}
 */
proto.external.Ed25519Signature.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Ed25519Signature.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.Ed25519Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Ed25519Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519Signature.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.Ed25519Signature.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.Ed25519Signature.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.Ed25519Signature.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.Ed25519Signature} returns this
 */
proto.external.Ed25519Signature.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.AccountKey.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.AccountKey.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.AccountKey} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.AccountKey.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      viewPrivateKey:
        (f = msg.getViewPrivateKey()) &&
        proto.external.RistrettoPrivate.toObject(includeInstance, f),
      spendPrivateKey:
        (f = msg.getSpendPrivateKey()) &&
        proto.external.RistrettoPrivate.toObject(includeInstance, f),
      fogReportUrl: jspb.Message.getFieldWithDefault(msg, 3, ''),
      fogReportId: jspb.Message.getFieldWithDefault(msg, 4, ''),
      fogAuthorityFingerprint: msg.getFogAuthorityFingerprint_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.AccountKey}
 */
proto.external.AccountKey.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.AccountKey();
  return proto.external.AccountKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.AccountKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.AccountKey}
 */
proto.external.AccountKey.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.RistrettoPrivate();
        reader.readMessage(
          value,
          proto.external.RistrettoPrivate.deserializeBinaryFromReader
        );
        msg.setViewPrivateKey(value);
        break;
      case 2:
        var value = new proto.external.RistrettoPrivate();
        reader.readMessage(
          value,
          proto.external.RistrettoPrivate.deserializeBinaryFromReader
        );
        msg.setSpendPrivateKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFogReportUrl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setFogReportId(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setFogAuthorityFingerprint(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.AccountKey.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.AccountKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.AccountKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.AccountKey.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getViewPrivateKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
  f = message.getSpendPrivateKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
  f = message.getFogReportUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getFogReportId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getFogAuthorityFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional RistrettoPrivate view_private_key = 1;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.AccountKey.prototype.getViewPrivateKey = function () {
  return /** @type{?proto.external.RistrettoPrivate} */ (jspb.Message.getWrapperField(
    this,
    proto.external.RistrettoPrivate,
    1
  ));
};

/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setViewPrivateKey = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.clearViewPrivateKey = function () {
  return this.setViewPrivateKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.AccountKey.prototype.hasViewPrivateKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional RistrettoPrivate spend_private_key = 2;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.AccountKey.prototype.getSpendPrivateKey = function () {
  return /** @type{?proto.external.RistrettoPrivate} */ (jspb.Message.getWrapperField(
    this,
    proto.external.RistrettoPrivate,
    2
  ));
};

/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setSpendPrivateKey = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.clearSpendPrivateKey = function () {
  return this.setSpendPrivateKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.AccountKey.prototype.hasSpendPrivateKey = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string fog_report_url = 3;
 * @return {string}
 */
proto.external.AccountKey.prototype.getFogReportUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setFogReportUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string fog_report_id = 4;
 * @return {string}
 */
proto.external.AccountKey.prototype.getFogReportId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setFogReportId = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bytes fog_authority_fingerprint = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.AccountKey.prototype.getFogAuthorityFingerprint = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    5,
    ''
  ));
};

/**
 * optional bytes fog_authority_fingerprint = 5;
 * This is a type-conversion wrapper around `getFogAuthorityFingerprint()`
 * @return {string}
 */
proto.external.AccountKey.prototype.getFogAuthorityFingerprint_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getFogAuthorityFingerprint()
  ));
};

/**
 * optional bytes fog_authority_fingerprint = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFogAuthorityFingerprint()`
 * @return {!Uint8Array}
 */
proto.external.AccountKey.prototype.getFogAuthorityFingerprint_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getFogAuthorityFingerprint()
  ));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setFogAuthorityFingerprint = function (
  value
) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.PublicAddress.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.PublicAddress.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.PublicAddress} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.PublicAddress.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      viewPublicKey:
        (f = msg.getViewPublicKey()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
      spendPublicKey:
        (f = msg.getSpendPublicKey()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
      fogReportUrl: jspb.Message.getFieldWithDefault(msg, 3, ''),
      fogReportId: jspb.Message.getFieldWithDefault(msg, 4, ''),
      fogAuthorityFingerprintSig: msg.getFogAuthorityFingerprintSig_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.PublicAddress}
 */
proto.external.PublicAddress.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.PublicAddress();
  return proto.external.PublicAddress.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.PublicAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.PublicAddress}
 */
proto.external.PublicAddress.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setViewPublicKey(value);
        break;
      case 2:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setSpendPublicKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFogReportUrl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setFogReportId(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setFogAuthorityFingerprintSig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.PublicAddress.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.PublicAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.PublicAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.PublicAddress.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getViewPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getSpendPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getFogReportUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getFogReportId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getFogAuthorityFingerprintSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional CompressedRistretto view_public_key = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.PublicAddress.prototype.getViewPublicKey = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    1
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setViewPublicKey = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.clearViewPublicKey = function () {
  return this.setViewPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.PublicAddress.prototype.hasViewPublicKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional CompressedRistretto spend_public_key = 2;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.PublicAddress.prototype.getSpendPublicKey = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    2
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setSpendPublicKey = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.clearSpendPublicKey = function () {
  return this.setSpendPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.PublicAddress.prototype.hasSpendPublicKey = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string fog_report_url = 3;
 * @return {string}
 */
proto.external.PublicAddress.prototype.getFogReportUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setFogReportUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string fog_report_id = 4;
 * @return {string}
 */
proto.external.PublicAddress.prototype.getFogReportId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setFogReportId = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bytes fog_authority_fingerprint_sig = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.PublicAddress.prototype.getFogAuthorityFingerprintSig = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    5,
    ''
  ));
};

/**
 * optional bytes fog_authority_fingerprint_sig = 5;
 * This is a type-conversion wrapper around `getFogAuthorityFingerprintSig()`
 * @return {string}
 */
proto.external.PublicAddress.prototype.getFogAuthorityFingerprintSig_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getFogAuthorityFingerprintSig()
  ));
};

/**
 * optional bytes fog_authority_fingerprint_sig = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFogAuthorityFingerprintSig()`
 * @return {!Uint8Array}
 */
proto.external.PublicAddress.prototype.getFogAuthorityFingerprintSig_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getFogAuthorityFingerprintSig()
  ));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setFogAuthorityFingerprintSig = function (
  value
) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.RootIdentity.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.RootIdentity.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.RootIdentity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.RootIdentity.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      rootEntropy:
        (f = msg.getRootEntropy()) &&
        proto.external.RootEntropy.toObject(includeInstance, f),
      fogReportUrl: jspb.Message.getFieldWithDefault(msg, 2, ''),
      fogReportId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      fogAuthorityFingerprint: msg.getFogAuthorityFingerprint_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RootIdentity}
 */
proto.external.RootIdentity.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.RootIdentity();
  return proto.external.RootIdentity.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RootIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RootIdentity}
 */
proto.external.RootIdentity.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.RootEntropy();
        reader.readMessage(
          value,
          proto.external.RootEntropy.deserializeBinaryFromReader
        );
        msg.setRootEntropy(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFogReportUrl(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFogReportId(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setFogAuthorityFingerprint(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RootIdentity.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.RootIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RootIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RootIdentity.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getRootEntropy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RootEntropy.serializeBinaryToWriter
    );
  }
  f = message.getFogReportUrl();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getFogReportId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getFogAuthorityFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional RootEntropy root_entropy = 1;
 * @return {?proto.external.RootEntropy}
 */
proto.external.RootIdentity.prototype.getRootEntropy = function () {
  return /** @type{?proto.external.RootEntropy} */ (jspb.Message.getWrapperField(
    this,
    proto.external.RootEntropy,
    1
  ));
};

/**
 * @param {?proto.external.RootEntropy|undefined} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setRootEntropy = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.clearRootEntropy = function () {
  return this.setRootEntropy(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RootIdentity.prototype.hasRootEntropy = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string fog_report_url = 2;
 * @return {string}
 */
proto.external.RootIdentity.prototype.getFogReportUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setFogReportUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string fog_report_id = 3;
 * @return {string}
 */
proto.external.RootIdentity.prototype.getFogReportId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setFogReportId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes fog_authority_fingerprint = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.RootIdentity.prototype.getFogAuthorityFingerprint = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    5,
    ''
  ));
};

/**
 * optional bytes fog_authority_fingerprint = 5;
 * This is a type-conversion wrapper around `getFogAuthorityFingerprint()`
 * @return {string}
 */
proto.external.RootIdentity.prototype.getFogAuthorityFingerprint_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getFogAuthorityFingerprint()
  ));
};

/**
 * optional bytes fog_authority_fingerprint = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFogAuthorityFingerprint()`
 * @return {!Uint8Array}
 */
proto.external.RootIdentity.prototype.getFogAuthorityFingerprint_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getFogAuthorityFingerprint()
  ));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setFogAuthorityFingerprint = function (
  value
) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.RootEntropy.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.RootEntropy.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.RootEntropy} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.RootEntropy.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RootEntropy}
 */
proto.external.RootEntropy.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.RootEntropy();
  return proto.external.RootEntropy.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RootEntropy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RootEntropy}
 */
proto.external.RootEntropy.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RootEntropy.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.RootEntropy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RootEntropy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RootEntropy.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.RootEntropy.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.RootEntropy.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.RootEntropy.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RootEntropy} returns this
 */
proto.external.RootEntropy.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.ViewKey.prototype.toObject = function (opt_includeInstance) {
    return proto.external.ViewKey.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.ViewKey} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.ViewKey.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      viewPrivateKey:
        (f = msg.getViewPrivateKey()) &&
        proto.external.RistrettoPrivate.toObject(includeInstance, f),
      spendPublicKey:
        (f = msg.getSpendPublicKey()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.ViewKey}
 */
proto.external.ViewKey.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.ViewKey();
  return proto.external.ViewKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.ViewKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.ViewKey}
 */
proto.external.ViewKey.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.RistrettoPrivate();
        reader.readMessage(
          value,
          proto.external.RistrettoPrivate.deserializeBinaryFromReader
        );
        msg.setViewPrivateKey(value);
        break;
      case 2:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setSpendPublicKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.ViewKey.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.ViewKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.ViewKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.ViewKey.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getViewPrivateKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
  f = message.getSpendPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
};

/**
 * optional RistrettoPrivate view_private_key = 1;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.ViewKey.prototype.getViewPrivateKey = function () {
  return /** @type{?proto.external.RistrettoPrivate} */ (jspb.Message.getWrapperField(
    this,
    proto.external.RistrettoPrivate,
    1
  ));
};

/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.ViewKey} returns this
 */
proto.external.ViewKey.prototype.setViewPrivateKey = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ViewKey} returns this
 */
proto.external.ViewKey.prototype.clearViewPrivateKey = function () {
  return this.setViewPrivateKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ViewKey.prototype.hasViewPrivateKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional CompressedRistretto spend_public_key = 2;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.ViewKey.prototype.getSpendPublicKey = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    2
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.ViewKey} returns this
 */
proto.external.ViewKey.prototype.setSpendPublicKey = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ViewKey} returns this
 */
proto.external.ViewKey.prototype.clearSpendPublicKey = function () {
  return this.setSpendPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ViewKey.prototype.hasSpendPublicKey = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.CurveScalar.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.CurveScalar.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.CurveScalar} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.CurveScalar.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.CurveScalar}
 */
proto.external.CurveScalar.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.CurveScalar();
  return proto.external.CurveScalar.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.CurveScalar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.CurveScalar}
 */
proto.external.CurveScalar.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.CurveScalar.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.CurveScalar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.CurveScalar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.CurveScalar.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.CurveScalar.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.CurveScalar.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.CurveScalar.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.CurveScalar} returns this
 */
proto.external.CurveScalar.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.KeyImage.prototype.toObject = function (opt_includeInstance) {
    return proto.external.KeyImage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.KeyImage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.KeyImage.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.KeyImage}
 */
proto.external.KeyImage.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.KeyImage();
  return proto.external.KeyImage.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.KeyImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.KeyImage}
 */
proto.external.KeyImage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.KeyImage.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.KeyImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.KeyImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.KeyImage.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.KeyImage.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.KeyImage.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.KeyImage.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.KeyImage} returns this
 */
proto.external.KeyImage.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.Range.prototype.toObject = function (opt_includeInstance) {
    return proto.external.Range.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.Range} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.Range.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      from: jspb.Message.getFieldWithDefault(msg, 1, '0'),
      to: jspb.Message.getFieldWithDefault(msg, 2, '0'),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Range}
 */
proto.external.Range.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.Range();
  return proto.external.Range.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Range}
 */
proto.external.Range.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setFrom(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Range.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Range.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getFrom();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(1, f);
  }
  f = message.getTo();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(2, f);
  }
};

/**
 * optional uint64 from = 1;
 * @return {string}
 */
proto.external.Range.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.Range} returns this
 */
proto.external.Range.prototype.setFrom = function (value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};

/**
 * optional uint64 to = 2;
 * @return {string}
 */
proto.external.Range.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.Range} returns this
 */
proto.external.Range.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxOutMembershipHash.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.TxOutMembershipHash.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxOutMembershipHash} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxOutMembershipHash.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutMembershipHash}
 */
proto.external.TxOutMembershipHash.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxOutMembershipHash();
  return proto.external.TxOutMembershipHash.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutMembershipHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutMembershipHash}
 */
proto.external.TxOutMembershipHash.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipHash.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxOutMembershipHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutMembershipHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipHash.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.TxOutMembershipHash.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.TxOutMembershipHash.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipHash.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.TxOutMembershipHash} returns this
 */
proto.external.TxOutMembershipHash.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxOutMembershipElement.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.TxOutMembershipElement.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxOutMembershipElement} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxOutMembershipElement.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      range:
        (f = msg.getRange()) &&
        proto.external.Range.toObject(includeInstance, f),
      hash:
        (f = msg.getHash()) &&
        proto.external.TxOutMembershipHash.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutMembershipElement}
 */
proto.external.TxOutMembershipElement.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxOutMembershipElement();
  return proto.external.TxOutMembershipElement.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutMembershipElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutMembershipElement}
 */
proto.external.TxOutMembershipElement.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.Range();
        reader.readMessage(
          value,
          proto.external.Range.deserializeBinaryFromReader
        );
        msg.setRange(value);
        break;
      case 2:
        var value = new proto.external.TxOutMembershipHash();
        reader.readMessage(
          value,
          proto.external.TxOutMembershipHash.deserializeBinaryFromReader
        );
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipElement.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxOutMembershipElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutMembershipElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipElement.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(1, f, proto.external.Range.serializeBinaryToWriter);
  }
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.TxOutMembershipHash.serializeBinaryToWriter
    );
  }
};

/**
 * optional Range range = 1;
 * @return {?proto.external.Range}
 */
proto.external.TxOutMembershipElement.prototype.getRange = function () {
  return /** @type{?proto.external.Range} */ (jspb.Message.getWrapperField(
    this,
    proto.external.Range,
    1
  ));
};

/**
 * @param {?proto.external.Range|undefined} value
 * @return {!proto.external.TxOutMembershipElement} returns this
 */
proto.external.TxOutMembershipElement.prototype.setRange = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutMembershipElement} returns this
 */
proto.external.TxOutMembershipElement.prototype.clearRange = function () {
  return this.setRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutMembershipElement.prototype.hasRange = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional TxOutMembershipHash hash = 2;
 * @return {?proto.external.TxOutMembershipHash}
 */
proto.external.TxOutMembershipElement.prototype.getHash = function () {
  return /** @type{?proto.external.TxOutMembershipHash} */ (jspb.Message.getWrapperField(
    this,
    proto.external.TxOutMembershipHash,
    2
  ));
};

/**
 * @param {?proto.external.TxOutMembershipHash|undefined} value
 * @return {!proto.external.TxOutMembershipElement} returns this
 */
proto.external.TxOutMembershipElement.prototype.setHash = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutMembershipElement} returns this
 */
proto.external.TxOutMembershipElement.prototype.clearHash = function () {
  return this.setHash(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutMembershipElement.prototype.hasHash = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.TxOutMembershipProof.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxOutMembershipProof.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.TxOutMembershipProof.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxOutMembershipProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxOutMembershipProof.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      index: jspb.Message.getFieldWithDefault(msg, 1, '0'),
      highestIndex: jspb.Message.getFieldWithDefault(msg, 2, '0'),
      elementsList: jspb.Message.toObjectList(
        msg.getElementsList(),
        proto.external.TxOutMembershipElement.toObject,
        includeInstance
      ),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutMembershipProof}
 */
proto.external.TxOutMembershipProof.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxOutMembershipProof();
  return proto.external.TxOutMembershipProof.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutMembershipProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutMembershipProof}
 */
proto.external.TxOutMembershipProof.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setIndex(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setHighestIndex(value);
        break;
      case 3:
        var value = new proto.external.TxOutMembershipElement();
        reader.readMessage(
          value,
          proto.external.TxOutMembershipElement.deserializeBinaryFromReader
        );
        msg.addElements(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipProof.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxOutMembershipProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutMembershipProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipProof.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(1, f);
  }
  f = message.getHighestIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(2, f);
  }
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.external.TxOutMembershipElement.serializeBinaryToWriter
    );
  }
};

/**
 * optional uint64 index = 1;
 * @return {string}
 */
proto.external.TxOutMembershipProof.prototype.getIndex = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.setIndex = function (value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};

/**
 * optional uint64 highest_index = 2;
 * @return {string}
 */
proto.external.TxOutMembershipProof.prototype.getHighestIndex = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.setHighestIndex = function (
  value
) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};

/**
 * repeated TxOutMembershipElement elements = 3;
 * @return {!Array<!proto.external.TxOutMembershipElement>}
 */
proto.external.TxOutMembershipProof.prototype.getElementsList = function () {
  return /** @type{!Array<!proto.external.TxOutMembershipElement>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.TxOutMembershipElement,
    3
  ));
};

/**
 * @param {!Array<!proto.external.TxOutMembershipElement>} value
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.setElementsList = function (
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.external.TxOutMembershipElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOutMembershipElement}
 */
proto.external.TxOutMembershipProof.prototype.addElements = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.external.TxOutMembershipElement,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.clearElementsList = function () {
  return this.setElementsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxOutConfirmationNumber.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.TxOutConfirmationNumber.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxOutConfirmationNumber} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxOutConfirmationNumber.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      hash: msg.getHash_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutConfirmationNumber}
 */
proto.external.TxOutConfirmationNumber.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxOutConfirmationNumber();
  return proto.external.TxOutConfirmationNumber.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutConfirmationNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutConfirmationNumber}
 */
proto.external.TxOutConfirmationNumber.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutConfirmationNumber.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxOutConfirmationNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutConfirmationNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutConfirmationNumber.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.TxOutConfirmationNumber.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.external.TxOutConfirmationNumber.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.external.TxOutConfirmationNumber.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.TxOutConfirmationNumber} returns this
 */
proto.external.TxOutConfirmationNumber.prototype.setHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.Amount.prototype.toObject = function (opt_includeInstance) {
    return proto.external.Amount.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.Amount} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.Amount.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      commitment:
        (f = msg.getCommitment()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
      maskedValue: jspb.Message.getFieldWithDefault(msg, 2, '0'),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Amount}
 */
proto.external.Amount.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.Amount();
  return proto.external.Amount.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Amount}
 */
proto.external.Amount.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setCommitment(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readFixed64String());
        msg.setMaskedValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Amount.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Amount.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getMaskedValue();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(2, f);
  }
};

/**
 * optional CompressedRistretto commitment = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.Amount.prototype.getCommitment = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    1
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.Amount} returns this
 */
proto.external.Amount.prototype.setCommitment = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Amount} returns this
 */
proto.external.Amount.prototype.clearCommitment = function () {
  return this.setCommitment(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Amount.prototype.hasCommitment = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional fixed64 masked_value = 2;
 * @return {string}
 */
proto.external.Amount.prototype.getMaskedValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.Amount} returns this
 */
proto.external.Amount.prototype.setMaskedValue = function (value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.EncryptedFogHint.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.EncryptedFogHint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.EncryptedFogHint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.EncryptedFogHint.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.EncryptedFogHint}
 */
proto.external.EncryptedFogHint.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.EncryptedFogHint();
  return proto.external.EncryptedFogHint.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.EncryptedFogHint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.EncryptedFogHint}
 */
proto.external.EncryptedFogHint.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.EncryptedFogHint.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.EncryptedFogHint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.EncryptedFogHint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.EncryptedFogHint.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.EncryptedFogHint.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.EncryptedFogHint.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.EncryptedFogHint.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.EncryptedFogHint} returns this
 */
proto.external.EncryptedFogHint.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxOut.prototype.toObject = function (opt_includeInstance) {
    return proto.external.TxOut.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxOut} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxOut.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      amount:
        (f = msg.getAmount()) &&
        proto.external.Amount.toObject(includeInstance, f),
      targetKey:
        (f = msg.getTargetKey()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
      publicKey:
        (f = msg.getPublicKey()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
      eFogHint:
        (f = msg.getEFogHint()) &&
        proto.external.EncryptedFogHint.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOut}
 */
proto.external.TxOut.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxOut();
  return proto.external.TxOut.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOut}
 */
proto.external.TxOut.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.Amount();
        reader.readMessage(
          value,
          proto.external.Amount.deserializeBinaryFromReader
        );
        msg.setAmount(value);
        break;
      case 2:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setTargetKey(value);
        break;
      case 3:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setPublicKey(value);
        break;
      case 4:
        var value = new proto.external.EncryptedFogHint();
        reader.readMessage(
          value,
          proto.external.EncryptedFogHint.deserializeBinaryFromReader
        );
        msg.setEFogHint(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOut.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOut.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(1, f, proto.external.Amount.serializeBinaryToWriter);
  }
  f = message.getTargetKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getEFogHint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.EncryptedFogHint.serializeBinaryToWriter
    );
  }
};

/**
 * optional Amount amount = 1;
 * @return {?proto.external.Amount}
 */
proto.external.TxOut.prototype.getAmount = function () {
  return /** @type{?proto.external.Amount} */ (jspb.Message.getWrapperField(
    this,
    proto.external.Amount,
    1
  ));
};

/**
 * @param {?proto.external.Amount|undefined} value
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.setAmount = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearAmount = function () {
  return this.setAmount(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasAmount = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional CompressedRistretto target_key = 2;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.TxOut.prototype.getTargetKey = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    2
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.setTargetKey = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearTargetKey = function () {
  return this.setTargetKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasTargetKey = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional CompressedRistretto public_key = 3;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.TxOut.prototype.getPublicKey = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    3
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.setPublicKey = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearPublicKey = function () {
  return this.setPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasPublicKey = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional EncryptedFogHint e_fog_hint = 4;
 * @return {?proto.external.EncryptedFogHint}
 */
proto.external.TxOut.prototype.getEFogHint = function () {
  return /** @type{?proto.external.EncryptedFogHint} */ (jspb.Message.getWrapperField(
    this,
    proto.external.EncryptedFogHint,
    4
  ));
};

/**
 * @param {?proto.external.EncryptedFogHint|undefined} value
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.setEFogHint = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearEFogHint = function () {
  return this.setEFogHint(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasEFogHint = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.TxIn.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxIn.prototype.toObject = function (opt_includeInstance) {
    return proto.external.TxIn.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxIn} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxIn.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      ringList: jspb.Message.toObjectList(
        msg.getRingList(),
        proto.external.TxOut.toObject,
        includeInstance
      ),
      proofsList: jspb.Message.toObjectList(
        msg.getProofsList(),
        proto.external.TxOutMembershipProof.toObject,
        includeInstance
      ),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxIn}
 */
proto.external.TxIn.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxIn();
  return proto.external.TxIn.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxIn}
 */
proto.external.TxIn.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.TxOut();
        reader.readMessage(
          value,
          proto.external.TxOut.deserializeBinaryFromReader
        );
        msg.addRing(value);
        break;
      case 2:
        var value = new proto.external.TxOutMembershipProof();
        reader.readMessage(
          value,
          proto.external.TxOutMembershipProof.deserializeBinaryFromReader
        );
        msg.addProofs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxIn.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxIn.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getRingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getProofsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.TxOutMembershipProof.serializeBinaryToWriter
    );
  }
};

/**
 * repeated TxOut ring = 1;
 * @return {!Array<!proto.external.TxOut>}
 */
proto.external.TxIn.prototype.getRingList = function () {
  return /** @type{!Array<!proto.external.TxOut>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.TxOut,
    1
  ));
};

/**
 * @param {!Array<!proto.external.TxOut>} value
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.setRingList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.external.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOut}
 */
proto.external.TxIn.prototype.addRing = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.external.TxOut,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.clearRingList = function () {
  return this.setRingList([]);
};

/**
 * repeated TxOutMembershipProof proofs = 2;
 * @return {!Array<!proto.external.TxOutMembershipProof>}
 */
proto.external.TxIn.prototype.getProofsList = function () {
  return /** @type{!Array<!proto.external.TxOutMembershipProof>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.TxOutMembershipProof,
    2
  ));
};

/**
 * @param {!Array<!proto.external.TxOutMembershipProof>} value
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.setProofsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.external.TxOutMembershipProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOutMembershipProof}
 */
proto.external.TxIn.prototype.addProofs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.external.TxOutMembershipProof,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.clearProofsList = function () {
  return this.setProofsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.TxPrefix.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxPrefix.prototype.toObject = function (opt_includeInstance) {
    return proto.external.TxPrefix.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxPrefix} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxPrefix.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      inputsList: jspb.Message.toObjectList(
        msg.getInputsList(),
        proto.external.TxIn.toObject,
        includeInstance
      ),
      outputsList: jspb.Message.toObjectList(
        msg.getOutputsList(),
        proto.external.TxOut.toObject,
        includeInstance
      ),
      fee: jspb.Message.getFieldWithDefault(msg, 3, '0'),
      tombstoneBlock: jspb.Message.getFieldWithDefault(msg, 4, '0'),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxPrefix}
 */
proto.external.TxPrefix.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxPrefix();
  return proto.external.TxPrefix.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxPrefix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxPrefix}
 */
proto.external.TxPrefix.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.TxIn();
        reader.readMessage(
          value,
          proto.external.TxIn.deserializeBinaryFromReader
        );
        msg.addInputs(value);
        break;
      case 2:
        var value = new proto.external.TxOut();
        reader.readMessage(
          value,
          proto.external.TxOut.deserializeBinaryFromReader
        );
        msg.addOutputs(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setFee(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setTombstoneBlock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxPrefix.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxPrefix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxPrefix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxPrefix.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.TxIn.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(3, f);
  }
  f = message.getTombstoneBlock();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(4, f);
  }
};

/**
 * repeated TxIn inputs = 1;
 * @return {!Array<!proto.external.TxIn>}
 */
proto.external.TxPrefix.prototype.getInputsList = function () {
  return /** @type{!Array<!proto.external.TxIn>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.TxIn,
    1
  ));
};

/**
 * @param {!Array<!proto.external.TxIn>} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setInputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.external.TxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxIn}
 */
proto.external.TxPrefix.prototype.addInputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.external.TxIn,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.clearInputsList = function () {
  return this.setInputsList([]);
};

/**
 * repeated TxOut outputs = 2;
 * @return {!Array<!proto.external.TxOut>}
 */
proto.external.TxPrefix.prototype.getOutputsList = function () {
  return /** @type{!Array<!proto.external.TxOut>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.TxOut,
    2
  ));
};

/**
 * @param {!Array<!proto.external.TxOut>} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setOutputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.external.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOut}
 */
proto.external.TxPrefix.prototype.addOutputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.external.TxOut,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.clearOutputsList = function () {
  return this.setOutputsList([]);
};

/**
 * optional uint64 fee = 3;
 * @return {string}
 */
proto.external.TxPrefix.prototype.getFee = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setFee = function (value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};

/**
 * optional uint64 tombstone_block = 4;
 * @return {string}
 */
proto.external.TxPrefix.prototype.getTombstoneBlock = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setTombstoneBlock = function (value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.RingMLSAG.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.RingMLSAG.prototype.toObject = function (opt_includeInstance) {
    return proto.external.RingMLSAG.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.RingMLSAG} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.RingMLSAG.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      cZero:
        (f = msg.getCZero()) &&
        proto.external.CurveScalar.toObject(includeInstance, f),
      responsesList: jspb.Message.toObjectList(
        msg.getResponsesList(),
        proto.external.CurveScalar.toObject,
        includeInstance
      ),
      keyImage:
        (f = msg.getKeyImage()) &&
        proto.external.KeyImage.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RingMLSAG}
 */
proto.external.RingMLSAG.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.RingMLSAG();
  return proto.external.RingMLSAG.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RingMLSAG} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RingMLSAG}
 */
proto.external.RingMLSAG.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.CurveScalar();
        reader.readMessage(
          value,
          proto.external.CurveScalar.deserializeBinaryFromReader
        );
        msg.setCZero(value);
        break;
      case 2:
        var value = new proto.external.CurveScalar();
        reader.readMessage(
          value,
          proto.external.CurveScalar.deserializeBinaryFromReader
        );
        msg.addResponses(value);
        break;
      case 3:
        var value = new proto.external.KeyImage();
        reader.readMessage(
          value,
          proto.external.KeyImage.deserializeBinaryFromReader
        );
        msg.setKeyImage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RingMLSAG.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.RingMLSAG.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RingMLSAG} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RingMLSAG.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getCZero();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
  f = message.getKeyImage();
  if (f != null) {
    writer.writeMessage(3, f, proto.external.KeyImage.serializeBinaryToWriter);
  }
};

/**
 * optional CurveScalar c_zero = 1;
 * @return {?proto.external.CurveScalar}
 */
proto.external.RingMLSAG.prototype.getCZero = function () {
  return /** @type{?proto.external.CurveScalar} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CurveScalar,
    1
  ));
};

/**
 * @param {?proto.external.CurveScalar|undefined} value
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.setCZero = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.clearCZero = function () {
  return this.setCZero(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RingMLSAG.prototype.hasCZero = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated CurveScalar responses = 2;
 * @return {!Array<!proto.external.CurveScalar>}
 */
proto.external.RingMLSAG.prototype.getResponsesList = function () {
  return /** @type{!Array<!proto.external.CurveScalar>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.CurveScalar,
    2
  ));
};

/**
 * @param {!Array<!proto.external.CurveScalar>} value
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.setResponsesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.external.CurveScalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.CurveScalar}
 */
proto.external.RingMLSAG.prototype.addResponses = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.external.CurveScalar,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.clearResponsesList = function () {
  return this.setResponsesList([]);
};

/**
 * optional KeyImage key_image = 3;
 * @return {?proto.external.KeyImage}
 */
proto.external.RingMLSAG.prototype.getKeyImage = function () {
  return /** @type{?proto.external.KeyImage} */ (jspb.Message.getWrapperField(
    this,
    proto.external.KeyImage,
    3
  ));
};

/**
 * @param {?proto.external.KeyImage|undefined} value
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.setKeyImage = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.clearKeyImage = function () {
  return this.setKeyImage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RingMLSAG.prototype.hasKeyImage = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.SignatureRctBulletproofs.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.SignatureRctBulletproofs.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.external.SignatureRctBulletproofs.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.SignatureRctBulletproofs} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.SignatureRctBulletproofs.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      ringSignaturesList: jspb.Message.toObjectList(
        msg.getRingSignaturesList(),
        proto.external.RingMLSAG.toObject,
        includeInstance
      ),
      pseudoOutputCommitmentsList: jspb.Message.toObjectList(
        msg.getPseudoOutputCommitmentsList(),
        proto.external.CompressedRistretto.toObject,
        includeInstance
      ),
      rangeProofs: msg.getRangeProofs_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.SignatureRctBulletproofs}
 */
proto.external.SignatureRctBulletproofs.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.SignatureRctBulletproofs();
  return proto.external.SignatureRctBulletproofs.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.SignatureRctBulletproofs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.SignatureRctBulletproofs}
 */
proto.external.SignatureRctBulletproofs.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.RingMLSAG();
        reader.readMessage(
          value,
          proto.external.RingMLSAG.deserializeBinaryFromReader
        );
        msg.addRingSignatures(value);
        break;
      case 2:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.addPseudoOutputCommitments(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRangeProofs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.SignatureRctBulletproofs.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.SignatureRctBulletproofs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.SignatureRctBulletproofs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignatureRctBulletproofs.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getRingSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.RingMLSAG.serializeBinaryToWriter
    );
  }
  f = message.getPseudoOutputCommitmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getRangeProofs_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * repeated RingMLSAG ring_signatures = 1;
 * @return {!Array<!proto.external.RingMLSAG>}
 */
proto.external.SignatureRctBulletproofs.prototype.getRingSignaturesList = function () {
  return /** @type{!Array<!proto.external.RingMLSAG>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.RingMLSAG,
    1
  ));
};

/**
 * @param {!Array<!proto.external.RingMLSAG>} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setRingSignaturesList = function (
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.external.RingMLSAG=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.RingMLSAG}
 */
proto.external.SignatureRctBulletproofs.prototype.addRingSignatures = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.external.RingMLSAG,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearRingSignaturesList = function () {
  return this.setRingSignaturesList([]);
};

/**
 * repeated CompressedRistretto pseudo_output_commitments = 2;
 * @return {!Array<!proto.external.CompressedRistretto>}
 */
proto.external.SignatureRctBulletproofs.prototype.getPseudoOutputCommitmentsList = function () {
  return /** @type{!Array<!proto.external.CompressedRistretto>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.external.CompressedRistretto,
    2
  ));
};

/**
 * @param {!Array<!proto.external.CompressedRistretto>} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setPseudoOutputCommitmentsList = function (
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.external.CompressedRistretto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.SignatureRctBulletproofs.prototype.addPseudoOutputCommitments = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.external.CompressedRistretto,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearPseudoOutputCommitmentsList = function () {
  return this.setPseudoOutputCommitmentsList([]);
};

/**
 * optional bytes range_proofs = 3;
 * @return {!(string|Uint8Array)}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofs = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    ''
  ));
};

/**
 * optional bytes range_proofs = 3;
 * This is a type-conversion wrapper around `getRangeProofs()`
 * @return {string}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofs_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getRangeProofs()));
};

/**
 * optional bytes range_proofs = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeProofs()`
 * @return {!Uint8Array}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofs_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getRangeProofs()
  ));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setRangeProofs = function (
  value
) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.Tx.prototype.toObject = function (opt_includeInstance) {
    return proto.external.Tx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.Tx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.Tx.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      prefix:
        (f = msg.getPrefix()) &&
        proto.external.TxPrefix.toObject(includeInstance, f),
      signature:
        (f = msg.getSignature()) &&
        proto.external.SignatureRctBulletproofs.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Tx}
 */
proto.external.Tx.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.Tx();
  return proto.external.Tx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Tx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Tx}
 */
proto.external.Tx.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.TxPrefix();
        reader.readMessage(
          value,
          proto.external.TxPrefix.deserializeBinaryFromReader
        );
        msg.setPrefix(value);
        break;
      case 2:
        var value = new proto.external.SignatureRctBulletproofs();
        reader.readMessage(
          value,
          proto.external.SignatureRctBulletproofs.deserializeBinaryFromReader
        );
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Tx.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.Tx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Tx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Tx.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(1, f, proto.external.TxPrefix.serializeBinaryToWriter);
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.SignatureRctBulletproofs.serializeBinaryToWriter
    );
  }
};

/**
 * optional TxPrefix prefix = 1;
 * @return {?proto.external.TxPrefix}
 */
proto.external.Tx.prototype.getPrefix = function () {
  return /** @type{?proto.external.TxPrefix} */ (jspb.Message.getWrapperField(
    this,
    proto.external.TxPrefix,
    1
  ));
};

/**
 * @param {?proto.external.TxPrefix|undefined} value
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.setPrefix = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.clearPrefix = function () {
  return this.setPrefix(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Tx.prototype.hasPrefix = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional SignatureRctBulletproofs signature = 2;
 * @return {?proto.external.SignatureRctBulletproofs}
 */
proto.external.Tx.prototype.getSignature = function () {
  return /** @type{?proto.external.SignatureRctBulletproofs} */ (jspb.Message.getWrapperField(
    this,
    proto.external.SignatureRctBulletproofs,
    2
  ));
};

/**
 * @param {?proto.external.SignatureRctBulletproofs|undefined} value
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.setSignature = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.clearSignature = function () {
  return this.setSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Tx.prototype.hasSignature = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.TxHash.prototype.toObject = function (opt_includeInstance) {
    return proto.external.TxHash.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.TxHash} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.TxHash.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      hash: msg.getHash_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxHash}
 */
proto.external.TxHash.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.TxHash();
  return proto.external.TxHash.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxHash}
 */
proto.external.TxHash.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxHash.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.TxHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxHash.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.TxHash.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.external.TxHash.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.external.TxHash.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.TxHash} returns this
 */
proto.external.TxHash.prototype.setHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.external.Receipt.prototype.toObject = function (opt_includeInstance) {
    return proto.external.Receipt.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.external.Receipt} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.external.Receipt.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      publicKey:
        (f = msg.getPublicKey()) &&
        proto.external.CompressedRistretto.toObject(includeInstance, f),
      confirmation:
        (f = msg.getConfirmation()) &&
        proto.external.TxOutConfirmationNumber.toObject(includeInstance, f),
      tombstoneBlock: jspb.Message.getFieldWithDefault(msg, 3, '0'),
      amount:
        (f = msg.getAmount()) &&
        proto.external.Amount.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Receipt}
 */
proto.external.Receipt.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.external.Receipt();
  return proto.external.Receipt.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Receipt}
 */
proto.external.Receipt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.external.CompressedRistretto();
        reader.readMessage(
          value,
          proto.external.CompressedRistretto.deserializeBinaryFromReader
        );
        msg.setPublicKey(value);
        break;
      case 2:
        var value = new proto.external.TxOutConfirmationNumber();
        reader.readMessage(
          value,
          proto.external.TxOutConfirmationNumber.deserializeBinaryFromReader
        );
        msg.setConfirmation(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setTombstoneBlock(value);
        break;
      case 4:
        var value = new proto.external.Amount();
        reader.readMessage(
          value,
          proto.external.Amount.deserializeBinaryFromReader
        );
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Receipt.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.external.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Receipt.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getConfirmation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.TxOutConfirmationNumber.serializeBinaryToWriter
    );
  }
  f = message.getTombstoneBlock();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(3, f);
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(4, f, proto.external.Amount.serializeBinaryToWriter);
  }
};

/**
 * optional CompressedRistretto public_key = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.Receipt.prototype.getPublicKey = function () {
  return /** @type{?proto.external.CompressedRistretto} */ (jspb.Message.getWrapperField(
    this,
    proto.external.CompressedRistretto,
    1
  ));
};

/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.setPublicKey = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearPublicKey = function () {
  return this.setPublicKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasPublicKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional TxOutConfirmationNumber confirmation = 2;
 * @return {?proto.external.TxOutConfirmationNumber}
 */
proto.external.Receipt.prototype.getConfirmation = function () {
  return /** @type{?proto.external.TxOutConfirmationNumber} */ (jspb.Message.getWrapperField(
    this,
    proto.external.TxOutConfirmationNumber,
    2
  ));
};

/**
 * @param {?proto.external.TxOutConfirmationNumber|undefined} value
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.setConfirmation = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearConfirmation = function () {
  return this.setConfirmation(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasConfirmation = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint64 tombstone_block = 3;
 * @return {string}
 */
proto.external.Receipt.prototype.getTombstoneBlock = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, '0'));
};

/**
 * @param {string} value
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.setTombstoneBlock = function (value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};

/**
 * optional Amount amount = 4;
 * @return {?proto.external.Amount}
 */
proto.external.Receipt.prototype.getAmount = function () {
  return /** @type{?proto.external.Amount} */ (jspb.Message.getWrapperField(
    this,
    proto.external.Amount,
    4
  ));
};

/**
 * @param {?proto.external.Amount|undefined} value
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.setAmount = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearAmount = function () {
  return this.setAmount(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasAmount = function () {
  return jspb.Message.getField(this, 4) != null;
};

goog.object.extend(exports, proto.external);
