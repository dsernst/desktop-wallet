// source: blockchain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

const jspb = require('google-protobuf');

const goog = jspb;
const global = Function('return this')();

const external_pb = require('./external_pb.js');

goog.object.extend(proto, external_pb);
goog.exportSymbol('proto.blockchain.ArchiveBlock', null, global);
goog.exportSymbol('proto.blockchain.ArchiveBlock.BlockCase', null, global);
goog.exportSymbol('proto.blockchain.ArchiveBlockV1', null, global);
goog.exportSymbol('proto.blockchain.Block', null, global);
goog.exportSymbol('proto.blockchain.BlockContents', null, global);
goog.exportSymbol('proto.blockchain.BlockContentsHash', null, global);
goog.exportSymbol('proto.blockchain.BlockID', null, global);
goog.exportSymbol('proto.blockchain.BlockSignature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.BlockID = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.BlockID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.BlockID.displayName = 'proto.blockchain.BlockID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.BlockContentsHash = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.BlockContentsHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.BlockContentsHash.displayName =
    'proto.blockchain.BlockContentsHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.Block = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.Block.displayName = 'proto.blockchain.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.BlockContents = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.blockchain.BlockContents.repeatedFields_,
    null
  );
};
goog.inherits(proto.blockchain.BlockContents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.BlockContents.displayName = 'proto.blockchain.BlockContents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.BlockSignature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.BlockSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.BlockSignature.displayName =
    'proto.blockchain.BlockSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.ArchiveBlockV1 = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.ArchiveBlockV1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.ArchiveBlockV1.displayName =
    'proto.blockchain.ArchiveBlockV1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.ArchiveBlock = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.blockchain.ArchiveBlock.oneofGroups_
  );
};
goog.inherits(proto.blockchain.ArchiveBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.ArchiveBlock.displayName = 'proto.blockchain.ArchiveBlock';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.BlockID.prototype.toObject = function (opt_includeInstance) {
    return proto.blockchain.BlockID.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.BlockID} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.BlockID.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.BlockID}
 */
proto.blockchain.BlockID.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.BlockID();
  return proto.blockchain.BlockID.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.BlockID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.BlockID}
 */
proto.blockchain.BlockID.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.BlockID.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.BlockID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.BlockID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockID.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockID.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.blockchain.BlockID.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockID.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockID} returns this
 */
proto.blockchain.BlockID.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.BlockContentsHash.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.blockchain.BlockContentsHash.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.BlockContentsHash} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.BlockContentsHash.toObject = function (
    includeInstance,
    msg
  ) {
    let f;
    const obj = {
      data: msg.getData_asB64(),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.BlockContentsHash}
 */
proto.blockchain.BlockContentsHash.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.BlockContentsHash();
  return proto.blockchain.BlockContentsHash.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.BlockContentsHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.BlockContentsHash}
 */
proto.blockchain.BlockContentsHash.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.BlockContentsHash.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.BlockContentsHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.BlockContentsHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockContentsHash.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockContentsHash.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.blockchain.BlockContentsHash.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockContentsHash.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockContentsHash} returns this
 */
proto.blockchain.BlockContentsHash.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.Block.prototype.toObject = function (opt_includeInstance) {
    return proto.blockchain.Block.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.Block} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.Block.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      id:
        (f = msg.getId()) &&
        proto.blockchain.BlockID.toObject(includeInstance, f),
      version: jspb.Message.getFieldWithDefault(msg, 2, 0),
      parentId:
        (f = msg.getParentId()) &&
        proto.blockchain.BlockID.toObject(includeInstance, f),
      index: jspb.Message.getFieldWithDefault(msg, 4, '0'),
      cumulativeTxoCount: jspb.Message.getFieldWithDefault(msg, 5, '0'),
      rootElement:
        (f = msg.getRootElement()) &&
        external_pb.TxOutMembershipElement.toObject(includeInstance, f),
      contentsHash:
        (f = msg.getContentsHash()) &&
        proto.blockchain.BlockContentsHash.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.Block}
 */
proto.blockchain.Block.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.Block();
  return proto.blockchain.Block.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.Block}
 */
proto.blockchain.Block.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.blockchain.BlockID();
        reader.readMessage(
          value,
          proto.blockchain.BlockID.deserializeBinaryFromReader
        );
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 3:
        var value = new proto.blockchain.BlockID();
        reader.readMessage(
          value,
          proto.blockchain.BlockID.deserializeBinaryFromReader
        );
        msg.setParentId(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setIndex(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setCumulativeTxoCount(value);
        break;
      case 6:
        var value = new external_pb.TxOutMembershipElement();
        reader.readMessage(
          value,
          external_pb.TxOutMembershipElement.deserializeBinaryFromReader
        );
        msg.setRootElement(value);
        break;
      case 7:
        var value = new proto.blockchain.BlockContentsHash();
        reader.readMessage(
          value,
          proto.blockchain.BlockContentsHash.deserializeBinaryFromReader
        );
        msg.setContentsHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.Block.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Block.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(1, f, proto.blockchain.BlockID.serializeBinaryToWriter);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getParentId();
  if (f != null) {
    writer.writeMessage(3, f, proto.blockchain.BlockID.serializeBinaryToWriter);
  }
  f = message.getIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(4, f);
  }
  f = message.getCumulativeTxoCount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(5, f);
  }
  f = message.getRootElement();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      external_pb.TxOutMembershipElement.serializeBinaryToWriter
    );
  }
  f = message.getContentsHash();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.blockchain.BlockContentsHash.serializeBinaryToWriter
    );
  }
};

/**
 * optional BlockID id = 1;
 * @return {?proto.blockchain.BlockID}
 */
proto.blockchain.Block.prototype.getId = function () {
  return /** @type{?proto.blockchain.BlockID} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.BlockID,
    1
  ));
};

/**
 * @param {?proto.blockchain.BlockID|undefined} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setId = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearId = function () {
  return this.setId(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Block.prototype.hasId = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.blockchain.Block.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional BlockID parent_id = 3;
 * @return {?proto.blockchain.BlockID}
 */
proto.blockchain.Block.prototype.getParentId = function () {
  return /** @type{?proto.blockchain.BlockID} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.BlockID,
    3
  ));
};

/**
 * @param {?proto.blockchain.BlockID|undefined} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setParentId = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearParentId = function () {
  return this.setParentId(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Block.prototype.hasParentId = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional uint64 index = 4;
 * @return {string}
 */
proto.blockchain.Block.prototype.getIndex = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, '0'));
};

/**
 * @param {string} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setIndex = function (value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};

/**
 * optional uint64 cumulative_txo_count = 5;
 * @return {string}
 */
proto.blockchain.Block.prototype.getCumulativeTxoCount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, '0'));
};

/**
 * @param {string} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setCumulativeTxoCount = function (value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};

/**
 * optional external.TxOutMembershipElement root_element = 6;
 * @return {?proto.external.TxOutMembershipElement}
 */
proto.blockchain.Block.prototype.getRootElement = function () {
  return /** @type{?proto.external.TxOutMembershipElement} */ (jspb.Message.getWrapperField(
    this,
    external_pb.TxOutMembershipElement,
    6
  ));
};

/**
 * @param {?proto.external.TxOutMembershipElement|undefined} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setRootElement = function (value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearRootElement = function () {
  return this.setRootElement(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Block.prototype.hasRootElement = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional BlockContentsHash contents_hash = 7;
 * @return {?proto.blockchain.BlockContentsHash}
 */
proto.blockchain.Block.prototype.getContentsHash = function () {
  return /** @type{?proto.blockchain.BlockContentsHash} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.BlockContentsHash,
    7
  ));
};

/**
 * @param {?proto.blockchain.BlockContentsHash|undefined} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setContentsHash = function (value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearContentsHash = function () {
  return this.setContentsHash(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Block.prototype.hasContentsHash = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.BlockContents.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.BlockContents.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.blockchain.BlockContents.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.BlockContents} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.BlockContents.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      keyImagesList: jspb.Message.toObjectList(
        msg.getKeyImagesList(),
        external_pb.KeyImage.toObject,
        includeInstance
      ),
      outputsList: jspb.Message.toObjectList(
        msg.getOutputsList(),
        external_pb.TxOut.toObject,
        includeInstance
      ),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.BlockContents}
 */
proto.blockchain.BlockContents.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.BlockContents();
  return proto.blockchain.BlockContents.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.BlockContents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.BlockContents}
 */
proto.blockchain.BlockContents.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new external_pb.KeyImage();
        reader.readMessage(
          value,
          external_pb.KeyImage.deserializeBinaryFromReader
        );
        msg.addKeyImages(value);
        break;
      case 2:
        var value = new external_pb.TxOut();
        reader.readMessage(
          value,
          external_pb.TxOut.deserializeBinaryFromReader
        );
        msg.addOutputs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.BlockContents.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.BlockContents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.BlockContents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockContents.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getKeyImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      external_pb.KeyImage.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      external_pb.TxOut.serializeBinaryToWriter
    );
  }
};

/**
 * repeated external.KeyImage key_images = 1;
 * @return {!Array<!proto.external.KeyImage>}
 */
proto.blockchain.BlockContents.prototype.getKeyImagesList = function () {
  return /** @type{!Array<!proto.external.KeyImage>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    external_pb.KeyImage,
    1
  ));
};

/**
 * @param {!Array<!proto.external.KeyImage>} value
 * @return {!proto.blockchain.BlockContents} returns this
 */
proto.blockchain.BlockContents.prototype.setKeyImagesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.external.KeyImage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.KeyImage}
 */
proto.blockchain.BlockContents.prototype.addKeyImages = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.external.KeyImage,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.BlockContents} returns this
 */
proto.blockchain.BlockContents.prototype.clearKeyImagesList = function () {
  return this.setKeyImagesList([]);
};

/**
 * repeated external.TxOut outputs = 2;
 * @return {!Array<!proto.external.TxOut>}
 */
proto.blockchain.BlockContents.prototype.getOutputsList = function () {
  return /** @type{!Array<!proto.external.TxOut>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    external_pb.TxOut,
    2
  ));
};

/**
 * @param {!Array<!proto.external.TxOut>} value
 * @return {!proto.blockchain.BlockContents} returns this
 */
proto.blockchain.BlockContents.prototype.setOutputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.external.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOut}
 */
proto.blockchain.BlockContents.prototype.addOutputs = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.external.TxOut,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.BlockContents} returns this
 */
proto.blockchain.BlockContents.prototype.clearOutputsList = function () {
  return this.setOutputsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.BlockSignature.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.blockchain.BlockSignature.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.BlockSignature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.BlockSignature.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      signature:
        (f = msg.getSignature()) &&
        external_pb.Ed25519Signature.toObject(includeInstance, f),
      signer:
        (f = msg.getSigner()) &&
        external_pb.Ed25519Public.toObject(includeInstance, f),
      signedAt: jspb.Message.getFieldWithDefault(msg, 3, '0'),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.BlockSignature}
 */
proto.blockchain.BlockSignature.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.BlockSignature();
  return proto.blockchain.BlockSignature.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.BlockSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.BlockSignature}
 */
proto.blockchain.BlockSignature.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new external_pb.Ed25519Signature();
        reader.readMessage(
          value,
          external_pb.Ed25519Signature.deserializeBinaryFromReader
        );
        msg.setSignature(value);
        break;
      case 2:
        var value = new external_pb.Ed25519Public();
        reader.readMessage(
          value,
          external_pb.Ed25519Public.deserializeBinaryFromReader
        );
        msg.setSigner(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readUint64String());
        msg.setSignedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.BlockSignature.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.BlockSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.BlockSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockSignature.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      external_pb.Ed25519Signature.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      external_pb.Ed25519Public.serializeBinaryToWriter
    );
  }
  f = message.getSignedAt();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(3, f);
  }
};

/**
 * optional external.Ed25519Signature signature = 1;
 * @return {?proto.external.Ed25519Signature}
 */
proto.blockchain.BlockSignature.prototype.getSignature = function () {
  return /** @type{?proto.external.Ed25519Signature} */ (jspb.Message.getWrapperField(
    this,
    external_pb.Ed25519Signature,
    1
  ));
};

/**
 * @param {?proto.external.Ed25519Signature|undefined} value
 * @return {!proto.blockchain.BlockSignature} returns this
 */
proto.blockchain.BlockSignature.prototype.setSignature = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.BlockSignature} returns this
 */
proto.blockchain.BlockSignature.prototype.clearSignature = function () {
  return this.setSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.BlockSignature.prototype.hasSignature = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional external.Ed25519Public signer = 2;
 * @return {?proto.external.Ed25519Public}
 */
proto.blockchain.BlockSignature.prototype.getSigner = function () {
  return /** @type{?proto.external.Ed25519Public} */ (jspb.Message.getWrapperField(
    this,
    external_pb.Ed25519Public,
    2
  ));
};

/**
 * @param {?proto.external.Ed25519Public|undefined} value
 * @return {!proto.blockchain.BlockSignature} returns this
 */
proto.blockchain.BlockSignature.prototype.setSigner = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.BlockSignature} returns this
 */
proto.blockchain.BlockSignature.prototype.clearSigner = function () {
  return this.setSigner(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.BlockSignature.prototype.hasSigner = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint64 signed_at = 3;
 * @return {string}
 */
proto.blockchain.BlockSignature.prototype.getSignedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, '0'));
};

/**
 * @param {string} value
 * @return {!proto.blockchain.BlockSignature} returns this
 */
proto.blockchain.BlockSignature.prototype.setSignedAt = function (value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.ArchiveBlockV1.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.blockchain.ArchiveBlockV1.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.ArchiveBlockV1} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.ArchiveBlockV1.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      block:
        (f = msg.getBlock()) &&
        proto.blockchain.Block.toObject(includeInstance, f),
      blockContents:
        (f = msg.getBlockContents()) &&
        proto.blockchain.BlockContents.toObject(includeInstance, f),
      signature:
        (f = msg.getSignature()) &&
        proto.blockchain.BlockSignature.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.ArchiveBlockV1}
 */
proto.blockchain.ArchiveBlockV1.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.ArchiveBlockV1();
  return proto.blockchain.ArchiveBlockV1.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.ArchiveBlockV1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.ArchiveBlockV1}
 */
proto.blockchain.ArchiveBlockV1.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.blockchain.Block();
        reader.readMessage(
          value,
          proto.blockchain.Block.deserializeBinaryFromReader
        );
        msg.setBlock(value);
        break;
      case 2:
        var value = new proto.blockchain.BlockContents();
        reader.readMessage(
          value,
          proto.blockchain.BlockContents.deserializeBinaryFromReader
        );
        msg.setBlockContents(value);
        break;
      case 3:
        var value = new proto.blockchain.BlockSignature();
        reader.readMessage(
          value,
          proto.blockchain.BlockSignature.deserializeBinaryFromReader
        );
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.ArchiveBlockV1.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.ArchiveBlockV1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.ArchiveBlockV1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ArchiveBlockV1.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(1, f, proto.blockchain.Block.serializeBinaryToWriter);
  }
  f = message.getBlockContents();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockchain.BlockContents.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.blockchain.BlockSignature.serializeBinaryToWriter
    );
  }
};

/**
 * optional Block block = 1;
 * @return {?proto.blockchain.Block}
 */
proto.blockchain.ArchiveBlockV1.prototype.getBlock = function () {
  return /** @type{?proto.blockchain.Block} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.Block,
    1
  ));
};

/**
 * @param {?proto.blockchain.Block|undefined} value
 * @return {!proto.blockchain.ArchiveBlockV1} returns this
 */
proto.blockchain.ArchiveBlockV1.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ArchiveBlockV1} returns this
 */
proto.blockchain.ArchiveBlockV1.prototype.clearBlock = function () {
  return this.setBlock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ArchiveBlockV1.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional BlockContents block_contents = 2;
 * @return {?proto.blockchain.BlockContents}
 */
proto.blockchain.ArchiveBlockV1.prototype.getBlockContents = function () {
  return /** @type{?proto.blockchain.BlockContents} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.BlockContents,
    2
  ));
};

/**
 * @param {?proto.blockchain.BlockContents|undefined} value
 * @return {!proto.blockchain.ArchiveBlockV1} returns this
 */
proto.blockchain.ArchiveBlockV1.prototype.setBlockContents = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ArchiveBlockV1} returns this
 */
proto.blockchain.ArchiveBlockV1.prototype.clearBlockContents = function () {
  return this.setBlockContents(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ArchiveBlockV1.prototype.hasBlockContents = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional BlockSignature signature = 3;
 * @return {?proto.blockchain.BlockSignature}
 */
proto.blockchain.ArchiveBlockV1.prototype.getSignature = function () {
  return /** @type{?proto.blockchain.BlockSignature} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.BlockSignature,
    3
  ));
};

/**
 * @param {?proto.blockchain.BlockSignature|undefined} value
 * @return {!proto.blockchain.ArchiveBlockV1} returns this
 */
proto.blockchain.ArchiveBlockV1.prototype.setSignature = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ArchiveBlockV1} returns this
 */
proto.blockchain.ArchiveBlockV1.prototype.clearSignature = function () {
  return this.setSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ArchiveBlockV1.prototype.hasSignature = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.blockchain.ArchiveBlock.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.blockchain.ArchiveBlock.BlockCase = {
  BLOCK_NOT_SET: 0,
  V1: 1,
};

/**
 * @return {proto.blockchain.ArchiveBlock.BlockCase}
 */
proto.blockchain.ArchiveBlock.prototype.getBlockCase = function () {
  return /** @type {proto.blockchain.ArchiveBlock.BlockCase} */ (jspb.Message.computeOneofCase(
    this,
    proto.blockchain.ArchiveBlock.oneofGroups_[0]
  ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.blockchain.ArchiveBlock.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.blockchain.ArchiveBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.blockchain.ArchiveBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.blockchain.ArchiveBlock.toObject = function (includeInstance, msg) {
    let f;
    const obj = {
      v1:
        (f = msg.getV1()) &&
        proto.blockchain.ArchiveBlockV1.toObject(includeInstance, f),
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.ArchiveBlock}
 */
proto.blockchain.ArchiveBlock.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.blockchain.ArchiveBlock();
  return proto.blockchain.ArchiveBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.ArchiveBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.ArchiveBlock}
 */
proto.blockchain.ArchiveBlock.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.blockchain.ArchiveBlockV1();
        reader.readMessage(
          value,
          proto.blockchain.ArchiveBlockV1.deserializeBinaryFromReader
        );
        msg.setV1(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.ArchiveBlock.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.blockchain.ArchiveBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.ArchiveBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ArchiveBlock.serializeBinaryToWriter = function (
  message,
  writer
) {
  let f;
  f = message.getV1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockchain.ArchiveBlockV1.serializeBinaryToWriter
    );
  }
};

/**
 * optional ArchiveBlockV1 v1 = 1;
 * @return {?proto.blockchain.ArchiveBlockV1}
 */
proto.blockchain.ArchiveBlock.prototype.getV1 = function () {
  return /** @type{?proto.blockchain.ArchiveBlockV1} */ (jspb.Message.getWrapperField(
    this,
    proto.blockchain.ArchiveBlockV1,
    1
  ));
};

/**
 * @param {?proto.blockchain.ArchiveBlockV1|undefined} value
 * @return {!proto.blockchain.ArchiveBlock} returns this
 */
proto.blockchain.ArchiveBlock.prototype.setV1 = function (value) {
  return jspb.Message.setOneofWrapperField(
    this,
    1,
    proto.blockchain.ArchiveBlock.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ArchiveBlock} returns this
 */
proto.blockchain.ArchiveBlock.prototype.clearV1 = function () {
  return this.setV1(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ArchiveBlock.prototype.hasV1 = function () {
  return jspb.Message.getField(this, 1) != null;
};

goog.object.extend(exports, proto.blockchain);
